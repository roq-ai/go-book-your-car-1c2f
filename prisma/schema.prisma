generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Timestamp(6)
  status     String   @db.VarChar(255)
  user_id    String   @db.Uuid
  vehicle_id String   @db.Uuid
  service_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  service    service  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle    vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  city        String?    @db.VarChar(255)
  state       String?    @db.VarChar(255)
  zip         String?    @db.VarChar(10)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mechanic    mechanic[]
  service     service[]
}

model mechanic {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name     String   @db.VarChar(255)
  last_name      String   @db.VarChar(255)
  experience     Int
  specialization String   @db.VarChar(255)
  rating         Int
  company_id     String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  company        company  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(255)
  cost        Int
  duration    Int
  company_id  String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  company     company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  company     company[]
  vehicle     vehicle[]
}

model vehicle {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make        String        @db.VarChar(255)
  model       String        @db.VarChar(255)
  year        Int
  color       String        @db.VarChar(255)
  vin         String        @unique @db.VarChar(255)
  mileage     Int
  user_id     String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
